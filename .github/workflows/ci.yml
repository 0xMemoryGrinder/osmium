name: CI

on:
  pull_request:

jobs:
  setup:
    uses: ./.github/workflows/detect-workspace-changes.yml
    with:
      from: ${{ github.head_ref }}
      since: ${{ github.base_ref }}

  flatten-deps:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      dependencies: ${{ toJson(fromJson(steps.flatten.outputs.result).dependencies) }}
    steps:
      - uses: actions/github-script@v6
        id: flatten
        with:
          script: |
            const rawExtensions = `${{ needs.setup.outputs.extensions }}`
            const rawLibraries = `${{ needs.setup.outputs.libraries }}`
            const rawPackages = `${{ needs.setup.outputs.packages }}`
            const extensions = JSON.parse(rawExtensions)
            const libraries = JSON.parse(rawLibraries)
            const packages = JSON.parse(rawPackages)

            console.log(extensions, libraries, packages);

            const deps = [...extensions, ...libraries, ...packages]

            return {
              dependencies: deps
            }

  lint:
    runs-on: ubuntu-latest
    needs: flatten-deps
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.flatten-deps.outputs.dependencies) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - name: Setup yarn
        id: setup-yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'

      - run: yarn workspace ${{ matrix.workspace.name }} run lint




  format:
    runs-on: ubuntu-latest
    needs: flatten-deps
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.flatten-deps.outputs.dependencies) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - name: Setup yarn
        id: setup-yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        
      - run: yarn workspace ${{ matrix.workspace.name }} run format

  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    needs: flatten-deps
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.flatten-deps.outputs.dependencies) }}
        os: [ubuntu-20.04]
        target: [x86_64-unknown-linux-gnu]
        code-target: [linux-x64]
        container: ["ubuntu:18.04"]
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
          - os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            code-target: linux-armhf
          - os: macos-11
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-11
            target: aarch64-apple-darwin
            code-target: darwin-arm64
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - name: Setup yarn
        id: setup-yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn set version stable
          yarn -v

      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        
      - run: yarn workspace ${{ matrix.workspace.name }} run build
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}

  test:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    needs: flatten-deps
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.flatten-deps.outputs.dependencies) }}
        os: [ubuntu-20.04]
        target: [x86_64-unknown-linux-gnu]
        code-target: [linux-x64]
        container: ["ubuntu:18.04"]
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
          - os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            code-target: linux-armhf
          - os: macos-11
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-11
            target: aarch64-apple-darwin
            code-target: darwin-arm64
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - name: Setup yarn
        id: setup-yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn set version stable
          yarn -v

      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install --frozen-lockfile
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        
      - run: yarn workspace ${{ matrix.workspace.name }} run test
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}